import 'package:flutter/material.dart';
import 'dart:ui';
// import 'package:dart_tags/dart_tags.dart';
import 'dart:io';
// import 'package:just_audio/just_audio.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/widgets.dart';
import 'package:audiotags/audiotags.dart';
import 'package:logging/logging.dart';
import 'dart:typed_data';
import 'package:flutter_media_metadata/flutter_media_metadata.dart';


final log = Logger('ExampleLogger');

class PlaylistPage extends StatefulWidget {
  final List<String> songs;
  const PlaylistPage({super.key, required this.songs});




  @override
  State<PlaylistPage> createState() => _PlaylistPageState();
}

class _PlaylistPageState extends State<PlaylistPage> {
  double _volumeValue = 0.7;
  bool _isPlaying = false;
  // String _imagePath = '/home/zenar56/Загрузки/12331.jpg';
  String _imagePath = r'C:\Users\zenar56\Music\FOR YMUSIC\1200x1200bf-60.jpg';
  // String _imagePath = '/home/zenar56/Музыка/Агата Кристи – Opium [LP] 2014/front.jpg';
  final player = AudioPlayer();                   // Create a player
  Uint8List imageData = Uint8List.fromList([]);
  int nowPlayingIndex = 0;
  String _trackName = '';
  String _trackArtist = 'UNDERTALE OST2';
  String _album = '';
  String _albumArtist = '';
  int _trackNumber = 0;
  int _albumLength = 0;
  int _year = 0;
  String _genre = '';
  String _authorName = '';
  String _writerName = '';
  int _discNumber = 0;
  String _mimeType = '';
  int _trackDuration = 0;
  int _bitrate = 0;


  void _loadAudio() async {
    final player = AudioPlayer();

    }

    Future<Map<String, dynamic>> _loadTag_using_dart_tags() async {
      try {
      final metadata = await MetadataRetriever.fromFile(File(widget.songs[nowPlayingIndex]));

      String? trackName = metadata.trackName;
      List<String>? trackArtistNames = metadata.trackArtistNames;
      String? albumName = metadata.albumName;
      String? albumArtistName = metadata.albumArtistName;
      int? trackNumber = metadata.trackNumber;
      int? albumLength = metadata.albumLength;
      int? year = metadata.year;
      String? genre = metadata.genre;
      String? authorName = metadata.authorName;
      String? writerName = metadata.writerName;
      int? discNumber = metadata.discNumber;
      String? mimeType = metadata.mimeType;
      int? trackDuration = metadata.trackDuration;
      int? bitrate = metadata.bitrate;
      Uint8List? albumArt = metadata.albumArt;


      Map<String, dynamic> all_tags = {
        'trackName': trackName,
        'trackArtistNames': trackArtistNames,
        'albumName': albumName,
        'albumArtistName': albumArtistName,
        'trackNumber': trackNumber,
        'albumLength': albumLength,
        'year': year,
        'genre': genre,
        'authorName': authorName,
        'writerName': writerName,
        'discNumber': discNumber,
        'mimeType': mimeType,
        'trackDuration': trackDuration,
        'bitrate': bitrate,
        'albumArt': albumArt,
        
      };

      return all_tags;

      } catch (e) {
        log.severe('Error loading tag: $e');
        return {};
      }
    }

  Future<Map<String, dynamic>> _loadTag() async {
    log.info('widget.songs: ${widget.songs}');
    try {
      Tag? tag = await AudioTags.read(widget.songs[nowPlayingIndex]);    String? title = tag?.title;
      String? trackArtist = tag?.trackArtist;
      String? album = tag?.album;
      String? albumArtist = tag?.albumArtist;
      String? genre = tag?.genre;
      int? year = tag?.year;
      int? trackNumber = tag?.trackNumber;
      int? trackTotal = tag?.trackTotal;
      int? discNumber = tag?.discNumber;
      int? discTotal = tag?.discTotal;
      int? duration = tag?.duration;
      List<Picture>? pictures = tag?.pictures;

      // print(title);
      // print(trackArtist);
      // print(album);
      // print(albumArtist);
      // print(genre);
      // print(year);
      // print(trackNumber);
      // print(trackTotal);
      // print(discNumber);
      // print(discTotal);
      // print(duration);
      // print(pictures);

      Map<String, dynamic> all_tags = {
        'title': title,
        'trackArtist': trackArtist,
        'album': album,
        'albumArtist': albumArtist,
        'genre': genre,
        'year': year,
        'trackNumber': trackNumber,
        'trackTotal': trackTotal,
        'discNumber': discNumber,
        'discTotal': discTotal,
        'duration': duration,
        'pictures': pictures,
      };

      return all_tags;
      
      
    } catch (e) {
      log.severe('Error loading tag: $e');

      // print(title);
      // print(trackArtist);
      // print(album);
      // print(albumArtist);
      // print(genre);
      // print(year);
      // print(trackNumber);
      // print(trackTotal);
      // print(discNumber);
      // print(discTotal);
      // print(duration);
      // print(pictures);
      return {};
    }

    
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
      body: Center(
        child: Container(
          height: MediaQuery.of(context).size.height,
          width: MediaQuery.of(context).size.width,



          decoration: BoxDecoration(
              image: DecorationImage(
                          // image: FileImage(File(_imagePath)),
                          image: MemoryImage(Uint8List.fromList(imageData)),



                          fit: BoxFit.cover,
                          colorFilter: ColorFilter.mode(
                            Colors.black.withOpacity(0.25),
                            BlendMode.darken,
                          ),
              ),

            gradient: LinearGradient(
              
              colors: [
                Color.fromRGBO(44, 44, 48, 1),
                Color.fromRGBO(34, 34, 38, 1),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight
            ),
          ),


          child: ClipRect(
            child: BackdropFilter(
              filter: ImageFilter.blur(
                sigmaX: 95.0,
                sigmaY: 95.0,
              ),
              child: Container(
                color: Colors.transparent,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [

                    // dart_tags.DartTags.readTags(File(songs[0])).then((tags) {
                    // dart_tags.



                    Container(
                      height: 200,
                      width: 200,
                      decoration: BoxDecoration(
                        image: DecorationImage(
                          image: FileImage(File(_imagePath)),
                          fit: BoxFit.cover,
                          colorFilter: ColorFilter.mode(
                            Colors.black.withOpacity(0),
                            BlendMode.darken,
                          ),
                        ),
                        boxShadow: [
                          BoxShadow(
                            color: const Color.fromARGB(255, 21, 21, 21),
                            blurRadius: 10,
                            offset: Offset(5, 10),
                          ),
                        ],
                      ),
                    ),







                    SizedBox(height: 35),

                    // Text('ASGORE (SLOWED)',style: TextStyle(color: Colors.white, fontSize: 32, fontWeight: FontWeight.bold),),
                    Text(widget.songs[nowPlayingIndex].split('/').last,style: TextStyle(color: Colors.white, fontSize: 32, fontWeight: FontWeight.bold),),
                    Text(_trackArtist,style: TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w300),),

                    SizedBox(height: 35),




                    // Slider(
                    //   value: 0.9,
                    //   onChanged: (value) {
                    //     setState(() {
                    //       value = value;
                    //       print(player.getDuration().asStream());
                    //       player.seek(Duration(seconds: (value *20 ).toInt()));
                    //     });
                    //   },
                    // ),






                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Material(
                          color: Colors.transparent,
                          borderRadius: BorderRadius.all(Radius.circular(20)),
                          
                          child: InkWell(
                            borderRadius: BorderRadius.all(Radius.circular(10)),
                            onTap: () {
                              setState(() {
                                nowPlayingIndex--;
                                if (nowPlayingIndex < 0) {
                                  nowPlayingIndex = widget.songs.length - 1;
                                }
                              });
                              player.stop();
                              player.play(DeviceFileSource(widget.songs[nowPlayingIndex]));
                              // _loadTag();
                            },
                            child: Container(
                              height: 40,
                              width: 40,

                              decoration: BoxDecoration(
                                color: const Color.fromRGBO(56, 56, 59, 1),
                                borderRadius: BorderRadius.all(Radius.circular(30)),
                              ),
                              child: Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Icon(Icons.skip_previous, color: Colors.white, size: 24),
                                  ],
                                ),
                            
                              )

                            ),
                        
                        ),





                        SizedBox(width: 15),





                        Material(
                          color: Colors.transparent,
                          borderRadius: BorderRadius.all(Radius.circular(20)),
                          
                          child: InkWell(
                        borderRadius: BorderRadius.all(Radius.circular(10)),
                        onTap: () {
                          setState(() {
                            _isPlaying = !_isPlaying;

                            if (!_isPlaying) {
                              player.pause();
                            } else {
                              player.play(DeviceFileSource(widget.songs[nowPlayingIndex]));
                            }
                          });

                          // player.play(DeviceFileSource(widget.songs[0]));
                        },
                        child: Container(
                          height: 50,
                          width: 50,

                          decoration: BoxDecoration(
                            color: const Color.fromRGBO(56, 56, 59, 1),
                            borderRadius: BorderRadius.all(Radius.circular(30)),
                          ),
                          child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  _isPlaying ? Icons.pause : Icons.play_arrow,
                                  color: Colors.white,
                                  size: 28
                                ),
                              ],
                            ),
                        
                          )

                        ),
                    
                    ),





                    SizedBox(width: 15),





                    Material(
                      color: Colors.transparent,
                      borderRadius: BorderRadius.all(Radius.circular(20)),
                      
                      child: InkWell(
                        borderRadius: BorderRadius.all(Radius.circular(10)),
                        onTap: () async {
                          setState(() {
                            nowPlayingIndex++;
                            if (nowPlayingIndex >= widget.songs.length) {
                              nowPlayingIndex = 0;
                            }
                            player.stop();
                            if (_isPlaying) {
                              player.play(DeviceFileSource(widget.songs[nowPlayingIndex]));
                            }
                          });
                          // Map<String, dynamic> a = await _loadTag();
                          Map<String, dynamic> a = await _loadTag_using_dart_tags();
                          if (a['albumArt'] != null) {
                            print('Длина данных изображения: ${a['albumArt'].length} байт');
                            print('Первые 10 байт: ${a['albumArt'].sublist(0, 10)}');
                          }
                          // setState(() {
                          //   _trackName = a['trackName'];
                          //   _trackArtist = a['trackArtistNames'];
                          //   _album = a['albumName'];
                          //   _albumArtist = a['albumArtistName'];
                          //   _trackNumber = a['trackNumber'];
                          //   _albumLength = a['albumLength'];
                          //   _year = a['year'];
                          //   _genre = a['genre'];
                          //   _authorName = a['authorName'];
                          //   _writerName = a['writerName'];
                          //   _discNumber = a['discNumber'];
                          //   _mimeType = a['mimeType'];
                          //   _trackDuration = a['trackDuration'];
                          //   _bitrate = a['bitrate'];

                          //   // imageData = a['albumArt'];
                          // });
                          // print(a);
                        },
                        child: Container(
                          height: 40,
                          width: 40,

                          decoration: BoxDecoration(
                            color: const Color.fromRGBO(56, 56, 59, 1),
                            borderRadius: BorderRadius.all(Radius.circular(30)),
                          ),
                          child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(Icons.skip_next, color: Colors.white, size: 24),
                              ],
                            ),
                        
                          )

                        ),
                    
                    ),


                  ],),





                    // Padding(
                    //   padding: EdgeInsets.symmetric(horizontal: 20),
                    //   child: SliderTheme(
                    //     data: SliderThemeData(
                    //       activeTrackColor: Colors.white,
                    //       inactiveTrackColor: Colors.white.withOpacity(0.3),
                    //       thumbColor: Colors.white,
                    //       overlayColor: Colors.white.withOpacity(0.1),
                    //       trackHeight: 2.0,
                    //     ),
                    //     child: Slider(
                    //       value: 0.5,
                    //       onChanged: (value) {},
                    //     ),
                    //   ),
                    // ),

                    // SizedBox(height: 20),
                    SizedBox(height: 15),

                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 40),
                      child: Row(


                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [




                          Icon(Icons.volume_down, color: Colors.white, size: 20),





                          SizedBox(width: 10),
                          Container(
                            width: 200,
                            child: SliderTheme(
                              data: SliderThemeData(
                                activeTrackColor: Colors.white,
                                inactiveTrackColor: Colors.white.withOpacity(0.3),
                                thumbColor: Colors.transparent,
                                overlayColor: Colors.transparent,
                                trackHeight: 12.5,
                                thumbShape: SliderComponentShape.noThumb,
                                overlayShape: SliderComponentShape.noOverlay,
                              ),
                              child: Slider(
                                value: _volumeValue,
                                onChanged: (value) {
                                  setState(() {
                                    _volumeValue = value;
                                    player.setVolume(_volumeValue);
                                  });
                                  print(_volumeValue);
                                },
                              ),
                            ),
                          ),

                          SizedBox(width: 10),
                          Icon(Icons.volume_up, color: Colors.white, size: 20),



                        ],




                      ),
                    ),



  
                  SizedBox(height: 20),




                  Row(

                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Material(
                        color: Colors.transparent,
                        borderRadius: BorderRadius.all(Radius.circular(20)),
                        
                        child: InkWell(
                          borderRadius: BorderRadius.all(Radius.circular(10)),
                          onTap: () {},
                          child: Container(
                            height: 35,
                            width: 35,

                            decoration: BoxDecoration(
                              color: const Color.fromRGBO(56, 56, 59, 1),
                              borderRadius: BorderRadius.all(Radius.circular(30)),
                            ),
                            child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(Icons.featured_play_list_outlined, color: Colors.white, size: 20),
                                ],
                              ),
                          
                            )

                          ),
                      
                      ),


                      SizedBox(width: 15),


                      Material(
                        color: Colors.transparent,
                        borderRadius: BorderRadius.all(Radius.circular(20)),
                        
                        child: InkWell(
                          borderRadius: BorderRadius.all(Radius.circular(10)),
                          onTap: () {},
                          child: Container(
                            height: 35,
                            width: 35,

                            decoration: BoxDecoration(
                              color: const Color.fromRGBO(56, 56, 59, 1),
                              borderRadius: BorderRadius.all(Radius.circular(30)),
                            ),
                            child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(Icons.shuffle, color: Colors.white, size: 20),
                                ],
                              ),
                          
                            )

                          ),
                      
                      ),


                      SizedBox(width: 75),


                      Material(
                        color: Colors.transparent,
                        borderRadius: BorderRadius.all(Radius.circular(20)),
                        
                        child: InkWell(
                          borderRadius: BorderRadius.all(Radius.circular(10)),
                          onTap: () {},
                          child: Container(
                            height: 35,
                            width: 35,

                            decoration: BoxDecoration(
                              color: const Color.fromRGBO(56, 56, 59, 1),
                              borderRadius: BorderRadius.all(Radius.circular(30)),
                            ),
                            child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(Icons.repeat_outlined, color: Colors.white, size: 20),
                                ],
                              ),
                          
                            )

                          ),
                      
                      ),


                      SizedBox(width: 15),


                      Material(
                        color: Colors.transparent,
                        borderRadius: BorderRadius.all(Radius.circular(20)),
                        
                        child: InkWell(
                          borderRadius: BorderRadius.all(Radius.circular(10)),
                          onTap: () {
                            setState(() {
                            });
                          },
                          child: Container(
                            height: 35,
                            width: 35,

                            decoration: BoxDecoration(
                              color: const Color.fromRGBO(56, 56, 59, 1),
                              borderRadius: BorderRadius.all(Radius.circular(30)),
                            ),
                            child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(Icons.menu, color: Colors.white, size: 20),
                                ],
                              ),
                          
                            )

                          ),
                      
                      ),








                      
                    ],
                  ),


                    // SizedBox(height: 20),
                    // Expanded(
                    //   child: ListView.builder(
                    //     itemCount: songs.length,
                    //     itemBuilder: (context, index) {
                    //       return ListTile(
                    //         title: Text(
                    //           songs[index].split('/').last,
                    //           style: TextStyle(color: Colors.white),
                    //         ),
                    //       );
                    //     },
                    //   ),
                    // ),
















                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
} 